// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Rinha.CompiledModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var cliente = ClienteEntityType.Create(this);
            var transacao = TransacaoEntityType.Create(this);

            TransacaoEntityType.CreateForeignKey1(transacao, cliente);

            ClienteEntityType.CreateAnnotations(cliente);
            TransacaoEntityType.CreateAnnotations(transacao);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var cliente = FindEntityType("Rinha.Cliente")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            cliente.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var rinhaClienteTableBase = new TableBase("Rinha.Cliente", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", rinhaClienteTableBase);
            rinhaClienteTableBase.Columns.Add("Id", idColumnBase);
            var limiteColumnBase = new ColumnBase<ColumnMappingBase>("Limite", "integer", rinhaClienteTableBase);
            rinhaClienteTableBase.Columns.Add("Limite", limiteColumnBase);
            var saldoInicialColumnBase = new ColumnBase<ColumnMappingBase>("SaldoInicial", "integer", rinhaClienteTableBase);
            rinhaClienteTableBase.Columns.Add("SaldoInicial", saldoInicialColumnBase);
            relationalModel.DefaultTables.Add("Rinha.Cliente", rinhaClienteTableBase);
            var rinhaClienteMappingBase = new TableMappingBase<ColumnMappingBase>(cliente, rinhaClienteTableBase, true);
            rinhaClienteTableBase.AddTypeMapping(rinhaClienteMappingBase, false);
            defaultTableMappings.Add(rinhaClienteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, cliente.FindProperty("Id")!, rinhaClienteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)limiteColumnBase, cliente.FindProperty("Limite")!, rinhaClienteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)saldoInicialColumnBase, cliente.FindProperty("SaldoInicial")!, rinhaClienteMappingBase);

            var tableMappings = new List<TableMapping>();
            cliente.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var clientesTable = new Table("Clientes", null, relationalModel);
            var idColumn = new Column("Id", "integer", clientesTable);
            clientesTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var limiteColumn = new Column("Limite", "integer", clientesTable);
            clientesTable.Columns.Add("Limite", limiteColumn);
            var saldoInicialColumn = new Column("SaldoInicial", "integer", clientesTable);
            clientesTable.Columns.Add("SaldoInicial", saldoInicialColumn);
            var pK_Clientes = new UniqueConstraint("PK_Clientes", clientesTable, new[] { idColumn });
            clientesTable.PrimaryKey = pK_Clientes;
            var pK_ClientesUc = RelationalModel.GetKey(this,
                "Rinha.Cliente",
                new[] { "Id" });
            pK_Clientes.MappedKeys.Add(pK_ClientesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClientesUc).Add(pK_Clientes);
            clientesTable.UniqueConstraints.Add("PK_Clientes", pK_Clientes);
            relationalModel.Tables.Add(("Clientes", null), clientesTable);
            var clientesTableMapping = new TableMapping(cliente, clientesTable, true);
            clientesTable.AddTypeMapping(clientesTableMapping, false);
            tableMappings.Add(clientesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, cliente.FindProperty("Id")!, clientesTableMapping);
            RelationalModel.CreateColumnMapping(limiteColumn, cliente.FindProperty("Limite")!, clientesTableMapping);
            RelationalModel.CreateColumnMapping(saldoInicialColumn, cliente.FindProperty("SaldoInicial")!, clientesTableMapping);

            var transacao = FindEntityType("Rinha.Transacao")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            transacao.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var rinhaTransacaoTableBase = new TableBase("Rinha.Transacao", null, relationalModel);
            var clienteIdColumnBase = new ColumnBase<ColumnMappingBase>("ClienteId", "integer", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("ClienteId", clienteIdColumnBase);
            var descricaoColumnBase = new ColumnBase<ColumnMappingBase>("Descricao", "text", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("Descricao", descricaoColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("Id", idColumnBase0);
            var realizadoEmColumnBase = new ColumnBase<ColumnMappingBase>("RealizadoEm", "timestamp with time zone", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("RealizadoEm", realizadoEmColumnBase);
            var tipoColumnBase = new ColumnBase<ColumnMappingBase>("Tipo", "character(1)", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("Tipo", tipoColumnBase);
            var valorColumnBase = new ColumnBase<ColumnMappingBase>("Valor", "integer", rinhaTransacaoTableBase);
            rinhaTransacaoTableBase.Columns.Add("Valor", valorColumnBase);
            relationalModel.DefaultTables.Add("Rinha.Transacao", rinhaTransacaoTableBase);
            var rinhaTransacaoMappingBase = new TableMappingBase<ColumnMappingBase>(transacao, rinhaTransacaoTableBase, true);
            rinhaTransacaoTableBase.AddTypeMapping(rinhaTransacaoMappingBase, false);
            defaultTableMappings0.Add(rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, transacao.FindProperty("Id")!, rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clienteIdColumnBase, transacao.FindProperty("ClienteId")!, rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descricaoColumnBase, transacao.FindProperty("Descricao")!, rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realizadoEmColumnBase, transacao.FindProperty("RealizadoEm")!, rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoColumnBase, transacao.FindProperty("Tipo")!, rinhaTransacaoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valorColumnBase, transacao.FindProperty("Valor")!, rinhaTransacaoMappingBase);

            var tableMappings0 = new List<TableMapping>();
            transacao.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var transacaosTable = new Table("Transacaos", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", transacaosTable);
            transacaosTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var clienteIdColumn = new Column("ClienteId", "integer", transacaosTable);
            transacaosTable.Columns.Add("ClienteId", clienteIdColumn);
            var descricaoColumn = new Column("Descricao", "text", transacaosTable);
            transacaosTable.Columns.Add("Descricao", descricaoColumn);
            var realizadoEmColumn = new Column("RealizadoEm", "timestamp with time zone", transacaosTable);
            transacaosTable.Columns.Add("RealizadoEm", realizadoEmColumn);
            var tipoColumn = new Column("Tipo", "character(1)", transacaosTable);
            transacaosTable.Columns.Add("Tipo", tipoColumn);
            var valorColumn = new Column("Valor", "integer", transacaosTable);
            transacaosTable.Columns.Add("Valor", valorColumn);
            var pK_Transacaos = new UniqueConstraint("PK_Transacaos", transacaosTable, new[] { idColumn0 });
            transacaosTable.PrimaryKey = pK_Transacaos;
            var pK_TransacaosUc = RelationalModel.GetKey(this,
                "Rinha.Transacao",
                new[] { "Id" });
            pK_Transacaos.MappedKeys.Add(pK_TransacaosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TransacaosUc).Add(pK_Transacaos);
            transacaosTable.UniqueConstraints.Add("PK_Transacaos", pK_Transacaos);
            var iX_Transacaos_ClienteId = new TableIndex(
            "IX_Transacaos_ClienteId", transacaosTable, new[] { clienteIdColumn }, false);
            var iX_Transacaos_ClienteIdIx = RelationalModel.GetIndex(this,
                "Rinha.Transacao",
                new[] { "ClienteId" });
            iX_Transacaos_ClienteId.MappedIndexes.Add(iX_Transacaos_ClienteIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Transacaos_ClienteIdIx).Add(iX_Transacaos_ClienteId);
            transacaosTable.Indexes.Add("IX_Transacaos_ClienteId", iX_Transacaos_ClienteId);
            relationalModel.Tables.Add(("Transacaos", null), transacaosTable);
            var transacaosTableMapping = new TableMapping(transacao, transacaosTable, true);
            transacaosTable.AddTypeMapping(transacaosTableMapping, false);
            tableMappings0.Add(transacaosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, transacao.FindProperty("Id")!, transacaosTableMapping);
            RelationalModel.CreateColumnMapping(clienteIdColumn, transacao.FindProperty("ClienteId")!, transacaosTableMapping);
            RelationalModel.CreateColumnMapping(descricaoColumn, transacao.FindProperty("Descricao")!, transacaosTableMapping);
            RelationalModel.CreateColumnMapping(realizadoEmColumn, transacao.FindProperty("RealizadoEm")!, transacaosTableMapping);
            RelationalModel.CreateColumnMapping(tipoColumn, transacao.FindProperty("Tipo")!, transacaosTableMapping);
            RelationalModel.CreateColumnMapping(valorColumn, transacao.FindProperty("Valor")!, transacaosTableMapping);
            var fK_Transacaos_Clientes_ClienteId = new ForeignKeyConstraint(
                "FK_Transacaos_Clientes_ClienteId", transacaosTable, clientesTable,
                new[] { clienteIdColumn },
                clientesTable.FindUniqueConstraint("PK_Clientes")!, ReferentialAction.Cascade);
            var fK_Transacaos_Clientes_ClienteIdFk = RelationalModel.GetForeignKey(this,
                "Rinha.Transacao",
                new[] { "ClienteId" },
                "Rinha.Cliente",
                new[] { "Id" });
            fK_Transacaos_Clientes_ClienteId.MappedForeignKeys.Add(fK_Transacaos_Clientes_ClienteIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Transacaos_Clientes_ClienteIdFk).Add(fK_Transacaos_Clientes_ClienteId);
            transacaosTable.ForeignKeyConstraints.Add(fK_Transacaos_Clientes_ClienteId);
            clientesTable.ReferencingForeignKeyConstraints.Add(fK_Transacaos_Clientes_ClienteId);
            return relationalModel.MakeReadOnly();
        }
    }
}
